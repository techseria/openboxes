var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

//      


var insert = function insert(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 3),
      name = _ref3[0],
      index = _ref3[1],
      value = _ref3[2];

  var changeValue = _ref2.changeValue;

  changeValue(state, name, function (array) {
    var copy = [].concat(toConsumableArray(array || []));
    copy.splice(index, 0, value);
    return copy;
  });
};

//      


var move = function move(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 3),
      name = _ref3[0],
      from = _ref3[1],
      to = _ref3[2];

  var changeValue = _ref2.changeValue;

  changeValue(state, name, function (array) {
    var copy = [].concat(toConsumableArray(array || []));
    var value = copy[from];
    copy.splice(from, 1);
    copy.splice(to, 0, value);
    return copy;
  });
};

//      


var pop = function pop(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 1),
      name = _ref3[0];

  var changeValue = _ref2.changeValue;

  var result = void 0;
  changeValue(state, name, function (array) {
    if (array) {
      if (!array.length) {
        return [];
      }
      result = array[array.length - 1];
      return array.slice(0, array.length - 1);
    }
  });
  return result;
};

//      


var push = function push(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 2),
      name = _ref3[0],
      value = _ref3[1];

  var changeValue = _ref2.changeValue;

  changeValue(state, name, function (array) {
    return array ? [].concat(toConsumableArray(array), [value]) : [value];
  });
};

//      


var remove = function remove(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 2),
      name = _ref3[0],
      index = _ref3[1];

  var changeValue = _ref2.changeValue;

  var returnValue = void 0;
  changeValue(state, name, function (array) {
    var copy = [].concat(toConsumableArray(array || []));
    returnValue = copy[index];
    copy.splice(index, 1);
    return copy;
  });
  return returnValue;
};

//      


var shift = function shift(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 1),
      name = _ref3[0];

  var changeValue = _ref2.changeValue;

  var result = void 0;
  changeValue(state, name, function (array) {
    if (array) {
      if (!array.length) {
        return [];
      }
      result = array[0];
      return array.slice(1, array.length);
    }
  });
  return result;
};

//      


var swap = function swap(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 3),
      name = _ref3[0],
      indexA = _ref3[1],
      indexB = _ref3[2];

  var changeValue = _ref2.changeValue;

  changeValue(state, name, function (array) {
    var copy = [].concat(toConsumableArray(array || []));
    var a = copy[indexA];
    copy[indexA] = copy[indexB];
    copy[indexB] = a;
    return copy;
  });
};

//      


var unshift = function unshift(_ref, state, _ref2) {
  var _ref3 = slicedToArray(_ref, 2),
      name = _ref3[0],
      value = _ref3[1];

  var changeValue = _ref2.changeValue;

  changeValue(state, name, function (array) {
    return array ? [value].concat(toConsumableArray(array)) : [value];
  });
};

//      

var mutators = {
  insert: insert,
  move: move,
  pop: pop,
  push: push,
  remove: remove,
  shift: shift,
  swap: swap,
  unshift: unshift
};

export default mutators;
